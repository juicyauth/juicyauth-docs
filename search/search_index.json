{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lockless - OTP Email Authentication","text":"<p>Welcome to Lockless, your solution for simple and secure OTP-based email authentication. This documentation will guide you through integrating Lockless into both your frontend and backend systems.</p>"},{"location":"#what-is-lockless","title":"What is Lockless?","text":"<p>Lockless is an authentication service that allows users to sign in without the need for passwords. Instead, users receive a One-Time Password (OTP) via email, making the authentication process both secure and user-friendly. Our service is ideal for developers looking for a seamless way to authenticate users in their applications.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<p>Lockless operates in two main parts: Client (frontend) and Backend.</p>"},{"location":"#1-client-frontend","title":"1. Client (Frontend)","text":"<p>On the client side, users enter their email address to receive a one-time password (OTP). The process looks like this: - The user enters their email and clicks \"Send OTP\". - Lockless sends an OTP to the user's email. - The user inputs the OTP to complete the authentication process.</p>"},{"location":"#2-backend","title":"2. Backend","text":"<p>On the backend side, developers only need to verify the JWT (JSON Web Token) received from the frontend. The process typically involves:</p> <ul> <li>The frontend sends the verified JWT to the backend.</li> <li>The backend verifies the JWT using the public key provided by Lockless through the /auth/public-key/ endpoint.</li> </ul> <p>This setup allows developers to integrate secure authentication into their web, mobile, or CLI applications with minimal effort, focusing solely on JWT verification in the backend.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>No Passwords: Users authenticate through email OTP, eliminating the need for traditional passwords.</li> <li>Easy Integration: Minimal code required to connect Lockless to your frontend and backend.</li> <li>Secure: Uses RS256 algorithm for JWT verification to ensure high-level security.</li> <li>Flexible: Works with any platform, including web and mobile apps, without needing embedded webviews.</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#email-personalization","title":"Email Personalization","text":"<p>We plan to introduce the ability for developers to customize the content of the OTP email sent to users. This will allow for better branding and communication, including the ability to adjust the email's subject, body text, and design elements.</p>"},{"location":"roadmap/#language-support","title":"Language Support","text":"<p>Lockless will offer multi-language support for OTP emails. Developers will be able to choose from a list of supported languages, with translations provided and verified by us. This feature aims to improve the user experience for global applications.</p>"},{"location":"roadmap/#usage-statistics","title":"Usage Statistics","text":"<p>We plan to implement a statistics dashboard, allowing developers to view detailed data about authentication activities. Key metrics like the number of sent OTPs, successful logins, and error rates will be available, helping developers optimize their authentication workflows.</p>"},{"location":"roadmap/#customizable-login-screens-for-popular-frameworks","title":"Customizable Login Screens for Popular Frameworks","text":"<p>We aim to develop libraries for popular frontend frameworks, such as React, Next.js, Vue.js, and Angular. These libraries will provide customizable login screens that developers can easily integrate into their applications, offering flexibility in design and user experience.</p>"},{"location":"api/","title":"API Overview","text":"<p>Lockless provides a set of secure endpoints for OTP-based authentication. These APIs are designed to integrate seamlessly with your backend services.</p> <p>The authentication process involves:</p> <ol> <li>Sending an OTP (One-Time Password) to the user's email.</li> <li>Verifying the OTP to authenticate the user.</li> <li>Retrieving the public key for JWT verification (backend only).</li> </ol> <p>Follow the individual sections to understand how to use each endpoint effectively.</p>"},{"location":"api/public-key/","title":"Get Public Key","text":"<p>Endpoint: <code>GET https://api.lockless.dev/auth/public-key/</code></p> <p>This endpoint is used by the backend to retrieve the public key used for verifying JWTs (JSON Web Tokens) issued by Lockless.</p>"},{"location":"api/public-key/#response","title":"Response","text":"<ul> <li><code>200 OK</code>: A string containing the public key in PEM format.</li> </ul>"},{"location":"api/public-key/#example-request","title":"Example Request","text":"<pre><code>curl -X GET \"https://api.lockless.com/auth/public-key/\"\n</code></pre>"},{"location":"api/send-otp/","title":"Send OTP","text":"<p>Endpoint: <code>POST https://api.lockless.dev/auth/send-otp/</code></p> <p>This endpoint is used by the frontend to send a one-time password (OTP) to the user's email address. The OTP is used for user authentication.</p>"},{"location":"api/send-otp/#request-body","title":"Request Body","text":"<pre><code>{\n  \"email\": \"user@example.com\",\n  \"app_id\": \"your_app_id\"\n}\n</code></pre> <ul> <li><code>email</code>: The email address where the OTP will be sent.</li> <li><code>app_id</code>: The application\u2019s unique identifier.</li> </ul>"},{"location":"api/send-otp/#response","title":"Response","text":"<ul> <li><code>200 OK</code>: OTP successfully sent.</li> <li><code>422 Unprocessable Entity</code>: Invalid input (e.g., missing email or app_id).</li> </ul>"},{"location":"api/send-otp/#example-request","title":"Example Request","text":"<pre><code>curl -X POST \"https://api.lockless.com/auth/send-otp/\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"email\": \"user@example.com\",\n  \"app_id\": \"your_app_id\"\n}'\n</code></pre>"},{"location":"api/verify-otp/","title":"Verify OTP","text":"<p>Endpoint: <code>POST https://api.lockless.dev/auth/verify-otp/</code></p> <p>This endpoint is used by the backend to verify the one-time password (OTP) sent to the user's email.</p>"},{"location":"api/verify-otp/#request-body","title":"Request Body","text":"<pre><code>{\n  \"email\": \"user@example.com\",\n  \"otp\": \"123456\",\n  \"app_id\": \"your_app_id\"\n}\n</code></pre> <ul> <li><code>email</code>: The user's email address.</li> <li><code>otp</code>: The OTP received by the user via email.</li> <li><code>app_id</code>: The application\u2019s unique identifier.</li> </ul>"},{"location":"api/verify-otp/#response","title":"Response","text":"<ul> <li><code>200 OK</code>: OTP successfully verified.</li> <li><code>422 Unprocessable Entity</code>: Invalid OTP, email, or app ID.</li> </ul>"},{"location":"api/verify-otp/#example-request","title":"Example Request","text":"<pre><code>curl -X POST \"https://api.lockless.com/auth/verify-otp/\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"email\": \"user@example.com\",\n  \"otp\": \"123456\",\n  \"app_id\": \"your_app_id\"\n}'\n</code></pre>"},{"location":"tutorial/python-backend/","title":"Python JWT Verification","text":"<p>This tutorial will guide you through verifying JSON Web Tokens (JWTs) in Python using Lockless's public key. JWTs are used to securely transmit information between parties as a JSON object.</p>"},{"location":"tutorial/python-backend/#step-1-install-required-libraries","title":"Step 1: Install Required Libraries","text":"<p>First, ensure you have the <code>PyJWT</code> library installed:</p> <pre><code>pip install PyJWT requests\n</code></pre>"},{"location":"tutorial/python-backend/#step-2-fetch-the-public-key","title":"Step 2: Fetch the Public Key","text":"<p>To verify a JWT, you need to fetch the public key from the Lockless API. Here's how you can retrieve it:</p> <pre><code>import requests\n\ndef get_public_key():\n    url = \"https://api.lockless.com/auth/public-key/\"\n    response = requests.get(url)\n    return response.text\n\n# Example usage\npublic_key = get_public_key()\nprint(public_key)\n</code></pre>"},{"location":"tutorial/python-backend/#step-3-verify-jwt-and-extract-email","title":"Step 3: Verify JWT and Extract Email","text":"<p>Once you have the public key, you can use it to verify the JWT and extract the user's email from the \"sub\" field in the payload:</p> <pre><code>import jwt\n\ndef verify_jwt(token: str, public_key: str) -&gt; str:\n    try:\n        payload = jwt.decode(token, public_key, algorithms=[\"RS256\"])\n        user_email = payload.get(\"sub\")  # Extract the user's email\n        return user_email\n    except jwt.ExpiredSignatureError:\n        raise ValueError(\"Token has expired\")\n    except jwt.InvalidTokenError:\n        raise ValueError(\"Invalid token\")\n\n# Example usage\ntoken = \"your_jwt_token\"\npublic_key = get_public_key()\n\ntry:\n    user_email = verify_jwt(token, public_key)\n    print(\"Token is valid, user email:\", user_email)\nexcept ValueError as e:\n    print(\"Token verification failed:\", str(e))\n</code></pre> <p>This function will decode and validate the JWT, and extract the user's email (which is stored in the \"sub\" field). If the token has expired or is invalid, an appropriate exception will be raised.</p>"},{"location":"tutorial/python-backend/#step-4-using-jwt-verification-in-fastapi","title":"Step 4: Using JWT Verification in FastAPI","text":"<p>To integrate this into a FastAPI application, you can use the verify_jwt function as a dependency in your request handlers. Here's how to extract the JWT from the Authorization header:</p> <pre><code>from fastapi import FastAPI, Depends, HTTPException, Header\n\napp = FastAPI()\n\ndef jwt_dependency(authorization: str = Header(...)):\n    if not authorization.startswith(\"Bearer \"):\n        raise HTTPException(status_code=400, detail=\"Invalid authorization header format\")\n\n    token = authorization.split(\" \")[1]  # Extract the token from the header\n    public_key = get_public_key()\n\n    try:\n        user_email = verify_jwt(token, public_key)\n        return user_email\n    except ValueError as e:\n        raise HTTPException(status_code=401, detail=\"Invalid or expired token\")\n\n@app.get(\"/protected-route/\")\ndef protected_route(user_email: str = Depends(jwt_dependency)):\n    return {\"message\": \"Access granted\", \"user_email\": user_email}\n</code></pre>"},{"location":"tutorial/react-frontend/","title":"React Frontend","text":"<p>in progress</p>"}]}